<?xml version="1.0" encoding="utf-8"?>
<Project>

	<!-- Standard Configuration -->
	<PropertyGroup Label="Framework and Language">
		<TargetFrameworks>net6.0;net7.0</TargetFrameworks>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>
	</PropertyGroup>

	<!-- Enable Internal Testing -->
	<ItemGroup Label="Test Internals">
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
			<_Parameter1>DynamicProxyGenAssembly2</_Parameter1>
		</AssemblyAttribute>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
			<_Parameter1>Tests.$(AssemblyName)</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<!-- Get Paths to Files -->
	<PropertyGroup>
		<LicenceFile>LICENSE</LicenceFile>
		<LocalPackFile>Local.pack.props</LocalPackFile>
		<LogoFile>logo.png</LogoFile>
		<ReadmeFile>README.md</ReadmeFile>
		<VersionFile>Version</VersionFile>
	</PropertyGroup>
	<PropertyGroup>
		<LicencePath>$([MSBuild]::GetPathOfFileAbove('$(LicenceFile)'))</LicencePath>
		<LocalPackPath>$([MSBuild]::GetPathOfFileAbove('$(LocalPackFile)'))</LocalPackPath>
		<LogoPath>$([System.IO.Path]::Combine('$(SolutionDir)', 'artwork', '$(LogoFile)'))</LogoPath>
		<ReadmePath>$([MSBuild]::GetPathOfFileAbove('$(ReadmeFile)', '$(MSBuildProjectDirectory)'))</ReadmePath>
		<VersionPath>$([MSBuild]::GetPathOfFileAbove('$(VersionFile)'))</VersionPath>
	</PropertyGroup>

	<!-- Import Files -->
	<ItemGroup Label="Files" Condition="'$(Configuration)'=='Release'">
		<None Include="$(LogoPath)" Pack="true" PackagePath="/"/>
		<None Include="$(LicencePath)" Pack="true" PackagePath="/"/>
		<None Include="$(ReadmePath)" Pack="true" PackagePath="/"/>
	</ItemGroup>

	<!-- Get Version -->
	<PropertyGroup Label="Version">
		<MaybeVersion>$([System.IO.File]::ReadAllText('$(VersionPath)'))</MaybeVersion>
	</PropertyGroup>

	<!-- Package Configuration -->
	<PropertyGroup Label="Package">
		<Authors>bfren</Authors>
		<Company>bfren.dev</Company>
		<Copyright>Copyright Â© bfren.dev 2019-$([System.DateTime]::Now.ToString(yyyy))</Copyright>
		<Version>$(MaybeVersion)</Version>
		<Description>$(MSBuildProjectName) library</Description>
		<PackageLicenseFile>$(LicenceFile)</PackageLicenseFile>
		<PackageIcon>$(LogoFile)</PackageIcon>
		<PackageProjectUrl>https://github.com/bfren/maybe/wiki</PackageProjectUrl>
		<PackageReadmeFile>$(ReadmeFile)</PackageReadmeFile>
		<RepositoryUrl>https://github.com/bfren/maybe</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
	</PropertyGroup>

	<!-- Documentation -->
	<PropertyGroup Label="Documentation" Condition="'$(Configuration)'=='Release'">
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
	</PropertyGroup>

	<!--
		[Optional]
		Create Local Packages
		Use 'DispatchToInnerBuilds' target to run after builds are completed for all frameworks
			1. Import local repo
			2. Create package
			3. Publish package to local repository
			4. Cleanup
	-->
	<Import Project="$(LocalPackPath)" Condition="Exists('$(LocalPackPath)')"/>
	<Target Name="PackAndPushToLocalNuget" AfterTargets="DispatchToInnerBuilds" Condition="Exists('$(LocalPackPath)') and '$(Configuration)'=='Release'">
		<Exec Command="dotnet pack &quot;$(ProjectFileName)&quot; -p:PackageVersion=$(MaybeVersion) --no-build --configuration Release"/>
		<Exec Command="nuget init &quot;$(MSBuildProjectDirectory)\bin\Release&quot; &quot;$(LocalNugetRepository)&quot;"/>
		<Exec Command="del &quot;$(MSBuildProjectDirectory)\bin\Release\*.nupkg&quot;"/>
	</Target>

</Project>
